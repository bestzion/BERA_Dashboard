"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/index",{

/***/ "(pages-dir-browser)/./src/lib/zapper.ts":
/*!***************************!*\
  !*** ./src/lib/zapper.ts ***!
  \***************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchTokenPrice: () => (/* binding */ fetchTokenPrice),\n/* harmony export */   fetchZapperAppBalances: () => (/* binding */ fetchZapperAppBalances),\n/* harmony export */   fetchZapperPortfolio: () => (/* binding */ fetchZapperPortfolio)\n/* harmony export */ });\n// src/lib/zapper.ts\n// 공통 GraphQL 엔드포인트\nconst API_URL = 'https://public.zapper.xyz/graphql';\n/**\n * 지갑의 토큰 포트폴리오 조회 (기존 로직 그대로)\n */ async function fetchZapperPortfolio(address) {\n    let first = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 50;\n    const apiKey = \"e148aa30-9b00-48f5-9b05-fd1d24d4ed2e\";\n    if (!apiKey) throw new Error('Zapper API 키가 없습니다.');\n    const query = \"\\n    query PortfolioV2($addresses: [Address!]!, $networks: [Network!]!, $first: Int!) {\\n      portfolioV2(addresses: $addresses, networks: $networks) {\\n        tokenBalances {\\n          byToken(first: $first) {\\n            edges {\\n              node {\\n                tokenAddress\\n                symbol\\n                name\\n                balance\\n                balanceUSD\\n                price\\n                imgUrlV2\\n                network { name }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \";\n    const variables = {\n        addresses: [\n            address\n        ],\n        networks: [\n            \"ethereum\",\n            \"polygon\",\n            \"optimism\",\n            \"arbitrum\",\n            \"bsc\"\n        ],\n        first\n    };\n    const res = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-zapper-api-key': apiKey\n        },\n        body: JSON.stringify({\n            query,\n            variables\n        })\n    });\n    if (!res.ok) {\n        const text = await res.text();\n        console.error('Zapper Portfolio 오류:', text);\n        throw new Error(\"Zapper API 오류: \".concat(res.statusText));\n    }\n    const { data, errors } = await res.json();\n    if (errors) {\n        console.error('GraphQL Portfolio 오류:', errors);\n        throw new Error('Zapper Portfolio 조회 중 GraphQL 오류 발생');\n    }\n    return data.portfolioV2.tokenBalances.byToken.edges.map((e)=>e.node);\n}\n/**\n * 단일 토큰 가격 조회 (기존 로직 그대로)\n */ async function fetchTokenPrice(address, chainId) {\n    const apiKey = \"e148aa30-9b00-48f5-9b05-fd1d24d4ed2e\";\n    if (!apiKey) throw new Error('Zapper API 키가 없습니다.');\n    const query = \"\\n    query TokenPriceData($address: Address!, $chainId: Int!) {\\n      fungibleTokenV2(address: $address, chainId: $chainId) {\\n        address\\n        symbol\\n        name\\n        decimals\\n        imageUrlV2\\n        priceData {\\n          price\\n          priceChange24h\\n          marketCap\\n          volume24h\\n        }\\n      }\\n    }\\n  \";\n    const variables = {\n        address,\n        chainId\n    };\n    const res = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-zapper-api-key': apiKey\n        },\n        body: JSON.stringify({\n            query,\n            variables\n        })\n    });\n    if (!res.ok) {\n        const text = await res.text();\n        console.error('Zapper Price 오류:', text);\n        throw new Error(\"Zapper API 오류: \".concat(res.statusText));\n    }\n    const { data, errors } = await res.json();\n    if (errors) {\n        console.error('GraphQL Price 오류:', errors);\n        throw new Error('Zapper 가격 조회 중 GraphQL 오류 발생');\n    }\n    const node = data.fungibleTokenV2;\n    return {\n        address: node.address,\n        symbol: node.symbol,\n        name: node.name,\n        decimals: node.decimals,\n        imageUrlV2: node.imageUrlV2,\n        price: node.priceData.price,\n        priceChange24h: node.priceData.priceChange24h,\n        marketCap: node.priceData.marketCap,\n        volume24h: node.priceData.volume24h\n    };\n}\n/**\n * DeFi 앱 포지션(App Balance) 조회\n */ async function fetchZapperAppBalances(address) {\n    let first = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 20;\n    const apiKey = \"e148aa30-9b00-48f5-9b05-fd1d24d4ed2e\";\n    if (!apiKey) throw new Error('Zapper API 키가 없습니다.');\n    const query = \"\\n    query AppBalances($addresses: [Address!]!, $first: Int!) {\\n      portfolioV2(addresses: $addresses) {\\n        appBalances {\\n          byApp(first: $first) {\\n            edges {\\n              node {\\n                balanceUSD\\n                app {\\n                  displayName\\n                  imgUrl\\n                }\\n                network {\\n                  name\\n                }\\n                positionBalances(first: $first) {\\n                  edges {\\n                    node {\\n                      type\\n                      groupLabel\\n                      tokens {\\n                        token {\\n                          symbol\\n                          price\\n                        }\\n                      }\\n                    }\\n                  }\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  \";\n    const variables = {\n        addresses: [\n            address\n        ],\n        first\n    };\n    const res = await fetch(API_URL, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'x-zapper-api-key': apiKey\n        },\n        body: JSON.stringify({\n            query,\n            variables\n        })\n    });\n    if (!res.ok) {\n        const text = await res.text();\n        console.error('Zapper AppBalances 오류:', text);\n        throw new Error('Zapper AppBalances 조회 중 오류 발생');\n    }\n    const { data, errors } = await res.json();\n    if (errors) {\n        console.error('GraphQL AppBalances 오류:', errors);\n        throw new Error('Zapper AppBalances 조회 중 GraphQL 오류 발생');\n    }\n    return data.portfolioV2.appBalances.byApp.edges.map((e)=>{\n        const node = e.node;\n        return {\n            displayName: node.app.displayName,\n            logoUrl: node.app.imgUrl,\n            network: node.network.name,\n            balanceUSD: node.balanceUSD,\n            positions: node.positionBalances.edges.map((p)=>({\n                    type: p.node.type,\n                    groupLabel: p.node.groupLabel,\n                    tokens: p.node.tokens.map((t)=>({\n                            symbol: t.token.symbol,\n                            price: t.token.price\n                        }))\n                }))\n        };\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(pages-dir-browser)/./src/lib/zapper.ts\n"));

/***/ })

});